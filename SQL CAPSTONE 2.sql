
                   ------ CREATING DATABASE "STUDENT2" ------

DROP DATABASE STUDENT2

CREATE DATABASE STUDENT2;
 
            ----- USING THE DATABASE "STUDENT2" THAT WE HAVE CREATED ABOVE------

USE STUDENT2;


----- CREATING TABLE "STUDENT_INFO" THAT CONTAINS FOLLOWING COLUMNS ------

CREATE TABLE STUDENT_INFO (
                          STU_ID INT PRIMARY KEY,
						  STU_NAME VARCHAR(20) NOT NULL,
						  STU_CLASS INT NOT NULL 
						  );


------ CREATING SECOND TABLE "STUDENT_PERSONAL_INFO" THAT CONTAINS FOLLOWING COLUMNS ------

 CREATE TABLE STUDENT_PERSONAL_INFO (
                                STU_ID INT PRIMARY KEY,
								STU_ADD VARCHAR(20) NOT NULL,
								STU_PHNO CHAR(14) UNIQUE 
								);


------ CREATING THIRD TABLE "STUDENT_MARKS" THAT CONTAINS FOLLOWING COLUMNS ------
CREATE TABLE STUDENT_MARKS (
                            STU_ID INT PRIMARY KEY,
							STU_MATHS_MARKS INT,
							STU_SCIENCE_MARKS INT,
							STU_SOCIAL_MARKS INT,
							STU_ENGLISH_MARKS INT
							);



------ INSERTING VALUES INTO TABLES BY USING "BULK INSERT METHOD" TO LOAD OUR DATA FROM EXCEL ------

BULK INSERT STUDENT_INFO
FROM 'C:\Users\reshm\Desktop\STUDENT_INFO.CSV'
WITH (FORMAT = 'CSV',
      FIRSTROW = 2,
	  FIELDTERMINATOR = ',',
	  ROWTERMINATOR = '\n' 
	  );             

             ------ BY DOING THE ABOVE PROCESS WE WILL GET ALL OUR DATA THAT WE HAVE CREATED AND SAVED IN EXCEL ------ 

SELECT * FROM STUDENT_INFO
 


------ USING "BULK INSERT METHOD" TO LOAD OUR DATA OF SECOND TABLE FROM EXCEL -----

BULK INSERT STUDENT_PERSONAL_INFO
FROM 'C:\Users\reshm\Desktop\STUDENT_PERSONAL_INFO.CSV'
WITH  (FORMAT = 'CSV',
      FIRSTROW = 2,
	  FIELDTERMINATOR = ',',
	  ROWTERMINATOR = '\n'
	  );


SELECT * FROM STUDENT_PERSONAL_INFO


------ USING "BULK INSERT METHOD" TO LOAD OUR DATA OF THIRD TABLE FROM EXCEL ------

BULK INSERT STUDENT_MARKS
FROM 'C:\Users\reshm\Desktop\STUDENT_MARKS.CSV'
WITH  (FORMAT = 'CSV',
      FIRSTROW = 2,
	  FIELDTERMINATOR = ',',
	  ROWTERMINATOR = '\n'
	  );

SELECT * FROM STUDENT_MARKS


                    ------ DROPING 3 TO 4 CONSTRAINTS FROM THE ABOVE TABLES -----

------ DROPING 1st CONSTRAINT FROM "STUDENT_INFO" TABLE WHICH IS "NOT NULL" ------

ALTER TABLE STUDENT_INFO
 ALTER COLUMN STU_NAME 
VARCHAR(20) NULL;

------ DROPING 2nd CONSTRAINT FROM "STUDENT_INFO" TABLE WHICH IS "NOT NULL" ------

 ALTER TABLE STUDENT_INFO
 ALTER COLUMN STU_CLASS
 INT NULL;

 ------ DROPING 3rd CONSTRAINT FROM "STUDENT_PERSONAL_INFO" TABLE WHICH IS "NOT NULL" -----

 ALTER TABLE STUDENT_PERSONAL_INFO
 ALTER COLUMN STU_ADD
 VARCHAR (20) NULL;


         ------ DROPING 4th CONSTRAINT FROM "STUDENT_PERSONAL_INFO" TABLE WHICH IS "UNIQUE" -----

 ------ DROPING UNIQUE CONSTAINT (GO TO OBJECT EXPLORER,CLICK DATABASE & THEN TABLES ,CLICK ON DBO.STU_PERSONAL_INFO,
        --- THEN CLICK ON KEYS ,COPY THE UNIQUE CONSTARINT & PASTE IN SERVER WITH ALTER TABLE -------
           
 ALTER TABLE STUDENT_PERSONAL_INFO
 DROP [UQ__STUDENT___695059DAD05A9C59];

 
            ------- SHOWING ALL THE DATA OF THE TABLES ------ 
SELECT * FROM STUDENT_INFO
SELECT * FROM STUDENT_PERSONAL_INFO
SELECT * FROM STUDENT_MARKS		

------ALL THE DATA ------

SELECT * FROM STUDENT_INFO
 JOIN STUDENT_PERSONAL_INFO ON (STUDENT_INFO.STU_ID =STUDENT_PERSONAL_INFO.STU_ID)
 JOIN  STUDENT_MARKS ON (STUDENT_PERSONAL_INFO.STU_ID = STUDENT_MARKS.STU_ID);


------ FINDING THE STUDENTS WHO HAS SCORED MORE THAN 60 IN ALL SUBJECTS -------

SELECT STUDENT_INFO.STU_ID, STU_NAME, STU_CLASS, STUDENT_PERSONAL_INFO.STU_ADD, STU_PHNO ,

           STUDENT_MARKS.STU_MATHS_MARKS, STU_SCIENCE_MARKS, STU_SOCIAL_MARKS, STU_ENGLISH_MARKS

		  FROM STUDENT_INFO

		  INNER JOIN STUDENT_PERSONAL_INFO	
		  
  ON  STUDENT_INFO.STU_ID=STUDENT_PERSONAL_INFO.STU_ID

  INNER JOIN STUDENT_MARKS

   ON STUDENT_PERSONAL_INFO.STU_ID = STUDENT_MARKS.STU_ID

   WHERE  STU_MATHS_MARKS > 60 AND STU_SCIENCE_MARKS>60 AND STU_SOCIAL_MARKS>60 AND  STU_ENGLISH_MARKS >60 ;


 ------- DOING THE ABOVE QUESTION INSIDE A PROCEDURE NAME "TOPPER_STUDENTS" & USING MULTI JOINS TO FETCH ALL THE DATA ------

 GO
  CREATE PROCEDURE TOPPER_STUDENTS
   AS 
     BEGIN
           SELECT STUDENT_INFO.STU_ID, STU_NAME, STU_CLASS, STUDENT_PERSONAL_INFO.STU_ADD, STU_PHNO ,

		   STUDENT_MARKS.STU_MATHS_MARKS, STU_SCIENCE_MARKS, STU_SOCIAL_MARKS, STU_ENGLISH_MARKS

	  FROM STUDENT_INFO

		  INNER JOIN STUDENT_PERSONAL_INFO

               ON  STUDENT_INFO.STU_ID=STUDENT_PERSONAL_INFO.STU_ID

          INNER JOIN STUDENT_MARKS

               ON STUDENT_PERSONAL_INFO.STU_ID = STUDENT_MARKS.STU_ID

   WHERE  STU_MATHS_MARKS > 60 AND STU_SCIENCE_MARKS>60 AND STU_SOCIAL_MARKS>60 AND STU_ENGLISH_MARKS >60 

      END;           
 GO
 -------- BY DOING THE ABOVE PROCEDURE IT SHOWS COMMANDS COMPLETED SUCCESFULLY-------

 ------- SEEING THE DATA OF "TOPPER_STUDENTS" PROCEDURE THAT WE CREATED --------

   EXECUTE  TOPPER_STUDENTS


------ CREATING A SIMPLE FUNCTION TO CALCULATE "STUDENT_PERCENTAGE" BY TAKING ID AS INPUT ------ 
   
GO
CREATE FUNCTION STUDENT_PERCENTAGE()
  RETURNS TABLE 
   AS 
    RETURN (SELECT STU_ID ,STU_MATHS_MARKS, STU_SCIENCE_MARKS, STU_SOCIAL_MARKS, STU_ENGLISH_MARKS,

((STU_MATHS_MARKS + STU_SCIENCE_MARKS + STU_SOCIAL_MARKS + STU_ENGLISH_MARKS)*100.0/400) AS  STUDENT_PERCENTAGE  

            FROM STUDENT_MARKS);
GO

------ EXECUTE THIS TO CHECK THE DATA -----

SELECT *FROM STUDENT_PERCENTAGE();


-------- BY DOING THE ABOVE PROCESS IT GIVES  PERCENTAGE OF ALL THE STUDENTS ---------


DROP FUNCTION STUDENT_PERCENTAGE       ----- DROPS THE ABOVE FUNCTION ------


-------- NOW TAKING ID AS INPUT ---------

GO
CREATE FUNCTION STUDENT_PERCENTAGE(@STU_ID INT)
  RETURNS TABLE 
       AS 
    RETURN (SELECT STU_ID ,STU_MATHS_MARKS, STU_SCIENCE_MARKS, STU_SOCIAL_MARKS, STU_ENGLISH_MARKS,

((STU_MATHS_MARKS + STU_SCIENCE_MARKS + STU_SOCIAL_MARKS + STU_ENGLISH_MARKS)*100.0/400) AS  STUDENT_PERCENTAGE 

            FROM STUDENT_MARKS
 
                      WHERE STU_ID = @STU_ID);
GO

------- NOW WE CAN TAKE STU_ID'S AS INPUT AND CHECK FOR RESULTS GIVEN BELOW ------

SELECT * FROM STUDENT_PERCENTAGE(1011);
                                              ------ CAN EXECUTE ANY ID-------
SELECT * FROM STUDENT_PERCENTAGE(1012);



------ CREATING A TRANSACTION "T1" TO DELETE STUDENT WHO GOT LESS THAN 60 MARKS IN MATHS & ENGLISH -------
BEGIN TRANSACTION 
             SAVE TRANSACTION T1
			 DELETE STUDENT_MARKS WHERE STU_MATHS_MARKS<60 AND STU_ENGLISH_MARKS<60;


 ------ CREATING A TRANSACTION "T2" TO DELETE STUDENT WHO GOT LESS THAN 50 MARKS IN SCIENCE & SOCIAL ------
BEGIN TRANSACTION 
             SAVE TRANSACTION T2
			 DELETE  STUDENT_MARKS WHERE STU_SCIENCE_MARKS<50 AND STU_SOCIAL_MARKS<50;


 ------ DOING ROLLBACK WORKS AS UNDO -------
 --------- ROLLBACK TRANSACTION T1 ----------
ROLLBACK TRANSACTION T1 

------- NOW ROLLBACK THE WHOLE TRANSACTION,IF WE WANT TO ROLLBACK WHOLE TRANSACTION THEN DON'T GIVE NAMES LIKE T1 ,T2 --------

ROLLBACK TRANSACTION


-----CREATING A PROCEDURE WHICH WILL TAKE TWO PARAMETERS,TABLE NAME & THE COLUMNS THAT USER DON'T WANT TO SEE FROM THIS TABLE ------

GO
CREATE PROCEDURE STUDENTS_DATA
  AS  
    BEGIN 
   SELECT STUDENT_INFO.STU_ID, STUDENT_PERSONAL_INFO.STU_ADD, STU_PHNO ,

		   STUDENT_MARKS.STU_MATHS_MARKS, STU_SCIENCE_MARKS, STU_SOCIAL_MARKS, STU_ENGLISH_MARKS

	  FROM STUDENT_INFO

		  INNER JOIN STUDENT_PERSONAL_INFO

               ON  STUDENT_INFO.STU_ID=STUDENT_PERSONAL_INFO.STU_ID

          INNER JOIN STUDENT_MARKS

               ON STUDENT_PERSONAL_INFO.STU_ID = STUDENT_MARKS.STU_ID

   END;
GO


EXECUTE  STUDENTS_DATA



                            ---------   { THE END }    ---------

							      -----------    { THANK YOU }    -----------